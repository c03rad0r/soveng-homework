import { NostrEvent, type Filter } from "nostr-tools";
import { BehaviorSubject, Observable } from "rxjs";
import { RelayGroup } from "./group.js";
import { Relay, RelayOptions } from "./relay.js";
import { IPool, PublishResponse, PublishOptions, RequestOptions, SubscriptionOptions, SubscriptionResponse } from "./types.js";
export declare class RelayPool implements IPool {
    options?: RelayOptions | undefined;
    groups$: BehaviorSubject<Map<string, RelayGroup>>;
    get groups(): Map<string, RelayGroup>;
    relays$: BehaviorSubject<Map<string, Relay>>;
    get relays(): Map<string, Relay>;
    /** An array of relays to never connect to */
    blacklist: Set<string>;
    constructor(options?: RelayOptions | undefined);
    protected filterBlacklist(urls: string[]): string[];
    /** Get or create a new relay connection */
    relay(url: string): Relay;
    /** Create a group of relays */
    group(relays: string[]): RelayGroup;
    /** Make a REQ to multiple relays that does not deduplicate events */
    req(relays: string[], filters: Filter | Filter[], id?: string): Observable<SubscriptionResponse>;
    /** Send an EVENT message to multiple relays */
    event(relays: string[], event: NostrEvent): Observable<PublishResponse>;
    /** Publish an event to multiple relays */
    publish(relays: string[], event: NostrEvent, opts?: PublishOptions): Observable<PublishResponse>;
    /** Request events from multiple relays */
    request(relays: string[], filters: Filter | Filter[], opts?: RequestOptions): Observable<NostrEvent>;
    /** Open a subscription to multiple relays */
    subscription(relays: string[], filters: Filter | Filter[], opts?: SubscriptionOptions): Observable<SubscriptionResponse>;
}
