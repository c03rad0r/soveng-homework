import { BehaviorSubject } from "rxjs";
import { RelayGroup } from "./group.js";
import { Relay } from "./relay.js";
export class RelayPool {
    options;
    groups$ = new BehaviorSubject(new Map());
    get groups() {
        return this.groups$.value;
    }
    relays$ = new BehaviorSubject(new Map());
    get relays() {
        return this.relays$.value;
    }
    /** An array of relays to never connect to */
    blacklist = new Set();
    constructor(options) {
        this.options = options;
    }
    filterBlacklist(urls) {
        return urls.filter((url) => !this.blacklist.has(url));
    }
    /** Get or create a new relay connection */
    relay(url) {
        if (this.blacklist.has(url))
            throw new Error("Relay is on blacklist");
        let relay = this.relays.get(url);
        if (relay)
            return relay;
        else {
            relay = new Relay(url, this.options);
            this.relays$.next(this.relays.set(url, relay));
            return relay;
        }
    }
    /** Create a group of relays */
    group(relays) {
        relays = this.filterBlacklist(relays);
        const key = relays.sort().join(",");
        let group = this.groups.get(key);
        if (group)
            return group;
        group = new RelayGroup(relays.map((url) => this.relay(url)));
        this.groups$.next(this.groups.set(key, group));
        return group;
    }
    /** Make a REQ to multiple relays that does not deduplicate events */
    req(relays, filters, id) {
        return this.group(relays).req(filters, id);
    }
    /** Send an EVENT message to multiple relays */
    event(relays, event) {
        return this.group(relays).event(event);
    }
    /** Publish an event to multiple relays */
    publish(relays, event, opts) {
        return this.group(relays).publish(event, opts);
    }
    /** Request events from multiple relays */
    request(relays, filters, opts) {
        return this.group(relays).request(filters, opts);
    }
    /** Open a subscription to multiple relays */
    subscription(relays, filters, opts) {
        return this.group(relays).subscription(filters, opts);
    }
}
