export declare const HiddenContentSymbol: unique symbol;
export type HiddenContentSigner = {
    nip04?: {
        encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
        decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
    };
    nip44?: {
        encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
        decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
    };
};
/** Various event kinds that can have encrypted tags in their content and which encryption method they use */
export declare const EventContentEncryptionMethod: Record<number, "nip04" | "nip44">;
/** Sets the encryption method that is used for the contents of a specific event kind */
export declare function setEventContentEncryptionMethod(kind: number, method: "nip04" | "nip44"): void;
/** Checks if an event can have hidden content */
export declare function canHaveHiddenContent(kind: number): boolean;
/** Checks if an event has hidden content */
export declare function hasHiddenContent<T extends {
    kind: number;
    content: string;
}>(event: T): boolean;
/** Returns the hidden tags for an event if they are unlocked */
export declare function getHiddenContent<T extends object>(event: T): string | undefined;
/** Checks if the hidden tags are locked */
export declare function isHiddenContentLocked<T extends object>(event: T): boolean;
/** Returns either nip04 or nip44 encryption methods depending on event kind */
export declare function getHiddenContentEncryptionMethods(kind: number, signer: HiddenContentSigner): {
    encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
} | {
    encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
};
export type HiddenContentEvent = {
    kind: number;
    pubkey: string;
    content: string;
};
/**
 * Unlocks the encrypted content in an event
 * @param event The event with content to decrypt
 * @param signer A signer to use to decrypt the tags
 * @throws
 */
export declare function unlockHiddenContent<T extends HiddenContentEvent>(event: T, signer: HiddenContentSigner): Promise<string>;
/** Removes the unencrypted hidden content on an event */
export declare function lockHiddenContent<T extends object>(event: T): void;
