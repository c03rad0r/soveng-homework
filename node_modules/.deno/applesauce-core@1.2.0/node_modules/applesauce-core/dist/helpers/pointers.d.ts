import { AddressPointer, DecodeResult, EventPointer, ProfilePointer } from "nostr-tools/nip19";
import { NostrEvent } from "nostr-tools";
export type AddressPointerWithoutD = Omit<AddressPointer, "identifier"> & {
    identifier?: string;
};
/** Parse the value of an "a" tag into an AddressPointer */
export declare function parseCoordinate(a: string): AddressPointerWithoutD | null;
export declare function parseCoordinate(a: string, requireD: false): AddressPointerWithoutD | null;
export declare function parseCoordinate(a: string, requireD: true): AddressPointer | null;
export declare function parseCoordinate(a: string, requireD: false, silent: false): AddressPointerWithoutD;
export declare function parseCoordinate(a: string, requireD: true, silent: false): AddressPointer;
export declare function parseCoordinate(a: string, requireD: true, silent: true): AddressPointer | null;
export declare function parseCoordinate(a: string, requireD: false, silent: true): AddressPointerWithoutD | null;
/** Extra a pubkey from the result of nip19.decode */
export declare function getPubkeyFromDecodeResult(result?: DecodeResult): string | undefined;
/** Encodes the result of nip19.decode */
export declare function encodeDecodeResult(result: DecodeResult): "" | `nprofile1${string}` | `nevent1${string}` | `naddr1${string}` | `nsec1${string}` | `npub1${string}` | `note1${string}`;
/**
 * Gets an EventPointer form a common "e" tag
 * @throws
 */
export declare function getEventPointerFromETag(tag: string[]): EventPointer;
/**
 * Gets an EventPointer form a "q" tag
 * @throws
 */
export declare function getEventPointerFromQTag(tag: string[]): EventPointer;
/**
 * Get an AddressPointer from an "a" tag
 * @throws
 */
export declare function getAddressPointerFromATag(tag: string[]): AddressPointer;
/**
 * Gets a ProfilePointer from a "p" tag
 * @throws
 */
export declare function getProfilePointerFromPTag(tag: string[]): ProfilePointer;
/** Parses "e", "a", "p", and "q" tags into a pointer */
export declare function getPointerFromTag(tag: string[]): DecodeResult | null;
export declare function isAddressPointer(pointer: DecodeResult["data"]): pointer is AddressPointer;
export declare function isEventPointer(pointer: DecodeResult["data"]): pointer is EventPointer;
/** Returns the coordinate string for an AddressPointer */
export declare function getCoordinateFromAddressPointer(pointer: AddressPointer): string;
/**
 * Returns an AddressPointer for a replaceable event
 * @throws
 */
export declare function getAddressPointerForEvent(event: NostrEvent, relays?: string[]): AddressPointer;
/**
 * Returns an EventPointer for an event
 * @throws
 */
export declare function getEventPointerForEvent(event: NostrEvent, relays?: string[]): EventPointer;
/** Returns a pointer for a given event */
export declare function getPointerForEvent(event: NostrEvent, relays?: string[]): DecodeResult;
