import { HiddenContentEvent, HiddenContentSigner } from "./hidden-content.js";
export declare const HiddenTagsSymbol: unique symbol;
/** Checks if an event can have hidden tags */
export declare function canHaveHiddenTags(kind: number): boolean;
/** Checks if an event has hidden tags */
export declare function hasHiddenTags<T extends {
    content: string;
    kind: number;
}>(event: T): boolean;
/** Returns the hidden tags for an event if they are unlocked */
export declare function getHiddenTags<T extends object>(event: T): string[][] | undefined;
/** Checks if the hidden tags are locked */
export declare function isHiddenTagsLocked<T extends object>(event: T): boolean;
/** Returns either nip04 or nip44 encryption method depending on list kind */
export declare function getHiddenTagsEncryptionMethods(kind: number, signer: HiddenContentSigner): {
    encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
} | {
    encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;
    decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;
};
/**
 * Decrypts the private list
 * @param event The list event to decrypt
 * @param signer A signer to use to decrypt the tags
 * @param store An optional EventStore to notify about the update
 * @throws
 */
export declare function unlockHiddenTags<T extends HiddenContentEvent>(event: T, signer: HiddenContentSigner): Promise<string[][]>;
export declare function lockHiddenTags<T extends object>(event: T): void;
