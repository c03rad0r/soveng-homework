import { Observable } from "rxjs";
import { Filter, NostrEvent } from "nostr-tools";
import type { AddressPointer, EventPointer } from "nostr-tools/nip19";
import { IEventStore } from "../event-store/interface.js";
import * as Queries from "../queries/index.js";
export type Query<T extends unknown> = (events: IEventStore, store: QueryStore) => Observable<T>;
export type QueryConstructor<T extends unknown, Args extends Array<any>> = ((...args: Args) => Query<T>) & {
    getKey?: (...args: Args) => string;
};
export declare class QueryStore {
    static Queries: typeof Queries;
    store: IEventStore;
    constructor(store: IEventStore);
    /** A directory of all active queries */
    queries: Map<QueryConstructor<any, any[]>, Map<string, Observable<any>>>;
    /** How long a query should be kept "warm" while nothing is subscribed to it */
    queryKeepWarmTimeout: number;
    /** Creates a cached query */
    createQuery<T extends unknown, Args extends Array<any>>(queryConstructor: QueryConstructor<T, Args>, ...args: Args): Observable<T | undefined>;
    /** Creates a query and waits for the next value */
    executeQuery<T extends unknown, Args extends Array<any>>(queryConstructor: QueryConstructor<T, Args>, ...args: Args): Promise<T>;
    /** Creates a SingleEventQuery */
    event(id: string): Observable<import("nostr-tools").Event | undefined>;
    /** Creates a MultipleEventsQuery */
    events(ids: string[]): Observable<Record<string, import("nostr-tools").Event> | undefined>;
    /** Creates a ReplaceableQuery */
    replaceable(kind: number, pubkey: string, d?: string): Observable<import("nostr-tools").Event | undefined>;
    /** Creates a ReplaceableSetQuery */
    replaceableSet(pointers: {
        kind: number;
        pubkey: string;
        identifier?: string;
    }[]): Observable<Record<string, import("nostr-tools").Event> | undefined>;
    /** Creates a TimelineQuery */
    timeline(filters: Filter | Filter[], keepOldVersions?: boolean): Observable<import("nostr-tools").Event[] | undefined>;
    /** Creates a ProfileQuery */
    profile(pubkey: string): Observable<import("../helpers/profile.js").ProfileContent | undefined>;
    /** Creates a ContactsQuery */
    contacts(pubkey: string): Observable<import("nostr-tools/nip19").ProfilePointer[] | undefined>;
    /** Creates a MuteQuery */
    mutes(pubkey: string): Observable<import("../helpers/mutes.js").Mutes | undefined>;
    /** Creates a ReactionsQuery */
    reactions(event: NostrEvent): Observable<import("nostr-tools").Event[] | undefined>;
    /** Creates a MailboxesQuery */
    mailboxes(pubkey: string): Observable<{
        inboxes: string[];
        outboxes: string[];
    } | undefined>;
    /** Creates a query for a users blossom servers */
    blossomServers(pubkey: string): Observable<URL[] | undefined>;
    /** Creates a ThreadQuery */
    thread(root: string | EventPointer | AddressPointer): Observable<Queries.Thread | undefined>;
}
export { Queries };
