import { Filter, NostrEvent } from "nostr-tools";
import { Observable } from "rxjs";
import { Database } from "./database.js";
import { IEventStore } from "./interface.js";
export declare const EventStoreSymbol: unique symbol;
export declare class EventStore implements IEventStore {
    database: Database;
    /** Enable this to keep old versions of replaceable events */
    keepOldVersions: boolean;
    /** A method used to verify new events before added them */
    verifyEvent?: (event: NostrEvent) => boolean;
    /** A stream of new events added to the store */
    inserts: Observable<NostrEvent>;
    /** A stream of events that have been updated */
    updates: Observable<NostrEvent>;
    /** A stream of events that have been removed */
    removes: Observable<NostrEvent>;
    constructor();
    protected deletedIds: Set<string>;
    protected deletedCoords: Map<string, number>;
    protected checkDeleted(event: string | NostrEvent): boolean;
    protected handleDeleteEvent(deleteEvent: NostrEvent): void;
    /** Copies important metadata from and identical event to another */
    static mergeDuplicateEvent(source: NostrEvent, dest: NostrEvent): void;
    /**
     * Adds an event to the database and update subscriptions
     * @throws
     */
    add(event: NostrEvent, fromRelay?: string): NostrEvent;
    /** Removes an event from the database and updates subscriptions */
    remove(event: string | NostrEvent): boolean;
    /** Removes any event that is not being used by a subscription */
    prune(max?: number): number;
    /** Add an event to the store and notifies all subscribes it has updated */
    update(event: NostrEvent): NostrEvent;
    /** Get all events matching a filter */
    getAll(filters: Filter | Filter[]): Set<NostrEvent>;
    /** Check if the store has an event */
    hasEvent(id: string): boolean;
    getEvent(id: string): NostrEvent | undefined;
    /** Check if the store has a replaceable event */
    hasReplaceable(kind: number, pubkey: string, d?: string): boolean;
    /** Gets the latest version of a replaceable event */
    getReplaceable(kind: number, pubkey: string, d?: string): NostrEvent | undefined;
    /** Returns all versions of a replaceable event */
    getReplaceableHistory(kind: number, pubkey: string, d?: string): NostrEvent[] | undefined;
    /** Returns a timeline of events that match filters */
    getTimeline(filters: Filter | Filter[]): NostrEvent[];
    /**
     * Creates an observable that streams all events that match the filter and remains open
     * @param filters
     * @param [onlyNew=false] Only subscribe to new events
     */
    filters(filters: Filter | Filter[], onlyNew?: boolean): Observable<NostrEvent>;
    /** Returns an observable that completes when an event is removed */
    removed(id: string): Observable<never>;
    /** Creates an observable that emits when event is updated */
    updated(event: string | NostrEvent): Observable<NostrEvent>;
    /** Creates an observable that subscribes to a single event */
    event(id: string): Observable<NostrEvent | undefined>;
    /** Creates an observable that subscribes to multiple events */
    events(ids: string[]): Observable<Record<string, NostrEvent>>;
    /** Creates an observable that subscribes to the latest version of a replaceable event */
    replaceable(kind: number, pubkey: string, d?: string): Observable<NostrEvent | undefined>;
    /** Creates an observable that subscribes to the latest version of an array of replaceable events*/
    replaceableSet(pointers: {
        kind: number;
        pubkey: string;
        identifier?: string;
    }[]): Observable<Record<string, NostrEvent>>;
    /** Creates an observable that updates with an array of sorted events */
    timeline(filters: Filter | Filter[], keepOldVersions?: boolean): Observable<NostrEvent[]>;
}
